#!/usr/bin/env python
# coding: utf-8

# # Import

# In[70]:


from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten
import numpy as np
import matplotlib.pyplot as plt
import random


# # Load Data

# In[28]:


X_train = np.loadtxt('input.csv', delimiter = ',')
Y_train = np.loadtxt('labels.csv', delimiter = ',')

X_test = np.loadtxt('input_test.csv', delimiter = ',')
Y_test = np.loadtxt('labels_test.csv', delimiter = ',')


# In[33]:


X_train = X_train.reshape(len(X_train), 100, 100, 3)
Y_train = Y_train.reshape(len(Y_train), 1)

X_test = X_test.reshape(len(X_test), 100, 100, 3)
Y_test = Y_test.reshape(len(Y_test), 1)
                        
X_train = X_train/255.0
Y_train = Y_train/255.0


# In[34]:


print("Shape of X trian:", X_train.shape)
print("Shape of y trian:", Y_train.shape)
print("Shape of X test:", X_test.shape)
print("Shape of Y test:", Y_test.shape)


# In[35]:


X_train[1,:]


# In[23]:


idx = random.randint(0, len(X_train))
plt.imshow(X_train[idx, :])


# # Model 

# In[36]:


model = Sequential([
    Conv2D(32, (3, 3), activation = 'relu', input_shape = (100, 100, 3)), 
    MaxPooling2D((2,2)),
                    
    Conv2D(32, (3, 3), activation = 'relu'), 
    MaxPooling2D((2, 2)),
                    
    Flatten(),
    Dense(64, activation = 'relu'),
    Dense(1, activation = 'sigmoid')
])


# In[40]:


model = Sequential()

model.add(Conv2D(32, (3, 3), activation = 'relu', input_shape = (100, 100, 3)))
model.add(MaxPooling2D((2,2)))

model.add(Conv2D(32, (3,3), activation = 'relu'))
model.add(MaxPooling2D((2,2)))

model.add(Flatten())
model.add(Dense(64, activation = 'relu'))
model.add(Dense(1, activation = 'sigmoid'))


# In[41]:


model.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])


# In[48]:


model.fit(X_train, Y_train, epochs = 5, batch_size = 64)


# In[49]:


model.evaluate(X_test, Y_test)


# 
# 
# 
# # Making predictions

# In[79]:


import matplotlib.pyplot as plt
import random

idx2 = random.randint(0, len(Y_test))
plt.imshow(X_test[idx2] / 255.0)  # Normalize pixel values to the range [0, 1]
plt.show()

normalized_image = X_test[idx2] / 255.0  # Normalize pixel values to the range [0, 1]
normalized_image_reshaped = normalized_image.reshape(1, 100, 100, 3)

y_pred = model.predict(normalized_image_reshaped)

predicted_class_index = y_pred.argmax()
predicted_class = "cat" if predicted_class_index == 0 else "dog"

print("Predicted class:", predicted_class)


# In[ ]:




